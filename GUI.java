import java.sql.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.FileWriter;

public class GUI extends javax.swing.JFrame {
    private String drop1Global;
    private String drop2Global;
    private String parameterGlobal;
    private boolean fileOutputGlobal = false;
    
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        drop1 = new javax.swing.JComboBox<>();
        drop2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        textBox = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        outputFile = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setText("Search For:");

        jLabel2.setText("From:");

        drop1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"Player", "Team"}));
        drop1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drop1ActionPerformed(evt);
            }
        });

        drop2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"------"}));
        drop2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drop2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Where:");

        textBox.setText("Type Here");
        textBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textBoxActionPerformed(evt);
            }
        });

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        outputFile.setText("Output as File");
        outputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(outputFile))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(drop1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(drop2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(textBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(drop1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(drop2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(textBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFile))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>    
    
    private void search() {
        String select = "";
        String from = "";
        String where = "";
        String sql = "";

        if (drop1Global == "Player") {
            select = "DISTINCT player.\"First Name \", player.\"Last Name\"";
            from += "player";

            if (drop2Global == "Season") {
                from += ", team";
                where = "(player.\"Team Code\" = team.\"team code\") AND (";

                String userInput = parameterGlobal;

                // Check for & or |
                if (userInput.contains("&")) {
                    String[] splitOnOr = userInput.split(" & ");
                    for (int i = 0; i < splitOnOr.length; i++) {
                        if (i == splitOnOr.length - 1) {
                            where += "team.\"season\" = " + splitOnOr[i] + ")";
                        }
                        else {
                            if(drop1Global == "Player"){
                                if(drop2Global == "Season"){
                                    select += " FROM player, team WHERE (player.\"Team Code\" = team.\"team code\") AND (";
                                    select += " team.\"season\" = " + splitOnOr[i] + ") UNION SELECT DISTINCT ";
                                    select += "player.\"First Name \", player.\"Last Name\"";
                                }
                                else{
                                        select +=" FROM player WHERE (team.\"season\" = " + splitOnOr[i] + ") UNION";
                                        select +=" SELECT DISTINCT player.\"First Name \", player.\"Last Name\"";
                                }
                            }
                        }
                    }
                }
                else if (userInput.contains("|")) {
                    String[] splitOnOr = userInput.split(" \\| ");

                    for (int i = 0; i < splitOnOr.length; i++) {
                        if (i == splitOnOr.length - 1) {
                            where += "team.\"season\" = " + splitOnOr[i] + ")";
                        }
                        else {
                            where += "team.\"season\" = " + splitOnOr[i] + ") OR (";
                        }   
                    }
                }
                else {
                    where += "team.\"season\" = " + parameterGlobal + ")";
                }
            }
            else if (drop2Global == "Team") {
                from += ", team";
                where = "(player.\"Team Code\" = team.\"team code\") AND (";

                // Check for & or |

                String userInput = parameterGlobal;

                // Check for & or |
                if (userInput.contains("&")) {
                    String[] splitOnOr = userInput.split(" & ");
                    for (int i = 0; i < splitOnOr.length; i++) {
                        if (i == splitOnOr.length - 1) {
                            where += "team.\"name\" = \'" + splitOnOr[i] + "\')";
                        }
                        else {
                                select += " FROM player, team WHERE (player.\"Team Code\" = team.\"team code\") AND (";
                                select += " team.\"name\" = \'" + splitOnOr[i] + "\') UNION SELECT DISTINCT ";
                                select += "player.\"First Name \", player.\"Last Name\"";
                        }
                    }
                }
                else if (userInput.contains("|")) {
                    String[] splitOnOr = userInput.split(" \\| ");

                    for (int i = 0; i < splitOnOr.length; i++) {
                        if (i == splitOnOr.length - 1) {
                            where += "team.\"name\" = \'" + splitOnOr[i] + "\')";
                        }
                        else {
                            where += "team.\"name\" = \'" + splitOnOr[i] + "\') OR (";
                        }   
                    }
                }
                else {
                    where += "team.\"name\" = \'" + parameterGlobal + "\')";
                }
            }

            sql = "SELECT " + select + " FROM " + from + " WHERE " + where + ";";
            System.out.println(sql);
            String firstName = "";
            String lastName = "";
            String name = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();
                //send statement to DBMS
                ResultSet result = stmt.executeQuery(sql);
                //OUTPUT
                JOptionPane.showMessageDialog(null,"Results from Query");
                //System.out.println("______________________________________");
                while (result.next()) {
                    firstName = result.getString("First Name ");
                    lastName = result.getString("Last Name");
                    name += firstName + " " + lastName + "\n";   
                }
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,"Error accessing Database.");
            }

            if(outputFile.isSelected())
            {
                fileOutputGlobal=true;
                try{
                    FileWriter fw = new FileWriter("output.txt");
                    fw.write(name);
                    fw.close();
                    fileOutputGlobal= false;
                }
                catch(Exception e)
                {
                    System.out.println("Error writing to output file");
                }
                    System.out.println("Success writing to output file");
                    JOptionPane.showMessageDialog(null, "Success writing to output file");
            }
            else{
                JOptionPane.showMessageDialog(null, name);
            }
        }
        else if (drop1Global == "Team") {
            select = "DISTINCT team.\"name\"";
            from += "team";

            if (drop2Global == "Season") {
                from += ", player";
                where = "(team.\"team code\" = player.\"Team Code\") AND (";

                String userInput = parameterGlobal;

                // Check for & or |
                if (userInput.contains("&")) {
                    String[] splitOnOr = userInput.split(" & ");
                    for (int i = 0; i < splitOnOr.length; i++) {
                        if (i == splitOnOr.length - 1) {
                        where += "team.\"season\" = " + splitOnOr[i] + ")";
                        }
                        else {
                            select += " FROM team, player WHERE (team.\"team code\" = player.\"Team Code\") AND (";
                            select += "team.\"season\" = " + splitOnOr[i] + ") UNION SELECT DISTINCT";
                            select += " team.\"name\"";
                        }
                    }
                }
                else if (userInput.contains("|")) {
                    String[] splitOnOr = userInput.split(" \\| ");

                    for (int i = 0; i < splitOnOr.length; i++) {
                        if (i == splitOnOr.length - 1) {
                            where += "team.\"season\" = " + splitOnOr[i] + ")";
                        }
                        else {
                            where += "team.\"season\" = " + splitOnOr[i] + ") OR (";
                        }   
                    }
                }
                else {
                    where += "team.\"season\" = " + parameterGlobal + ")";
                }
            }
            else if (drop2Global == "Player") {
                from += ", player";
                where = "(team.\"team code\" = player.\"Team Code\") AND (";

                String userInput = parameterGlobal;

                // Check for & or |
                // Should only be able to find people based on Full Name (for now)
                if (userInput.contains("&")) {
                    // For AND, Union two separate sql queries 
                    String[] splitOnAnd = userInput.split("& ");
                    String splitOnAndString  = "";
                    for(int i = 0; i < splitOnAnd.length; i++)
                    {
                        splitOnAndString += splitOnAnd[i];
                    }
                    String[] splitOnSpace = splitOnAndString.split(" ");
                    
                    for (int i = 0; i < splitOnSpace.length; i=i+2) {
                        if (i+2 == splitOnSpace.length) {
                            where += "player.\"First Name \" = \'" + splitOnSpace[i] + "\') AND (player.\"Last Name\" = \'"+ splitOnSpace[i+1] + "\')";
                        }
                        else {
                            select += " FROM team, player WHERE (team.\"team code\" = player.\"Team Code\") AND (";
                            select += "player.\"First Name \" = \'" + splitOnSpace[i] + "\') AND (";
                            select += "player.\"Last Name\" = \'" + splitOnSpace[i+1] + "\') UNION SELECT DISTINCT"; 
                            select += " team.\"name\"";
                        }
                    }
                }
                else if (userInput.contains("|")) {
                    // For OR, add another conditional in the WHERE block
                    String[] splitOnOr = userInput.split("\\|");
                    String splitOnOrString = "";

                    for (int i = 0; i < splitOnOr.length; i++) {
                        System.out.println(splitOnOr[i]);
                        splitOnOrString += splitOnOr[i];
                    }

                    String[] splitOnSpace = splitOnOrString.split("[ ]+"); 

                    for (int i = 0; i < splitOnSpace.length; i++) {
                        if (i == splitOnSpace.length - 1) {
                            where += "player.\"Last Name\" = \'" + splitOnSpace[i] + "\'))";
                        }
                        else if (i % 2 == 0) {
                            where += "(player.\"First Name \" = \'" + splitOnSpace[i] + "\') AND (";
                        }
                        else {
                            where += "player.\"Last Name\" = \'" + splitOnSpace[i] + "\')) OR (";
                        }   
                    }
                }
                else {
                    String space = " ";
                    String[] splitOnSpace = userInput.split(space); 
                    
                    String firstName = splitOnSpace[0];
                    String lastName = splitOnSpace[1];

                    where += "player.\"First Name \" = \'" + firstName + "\') AND (player.\"Last Name\" = \'" + lastName + "\')";
                }
            }

            // if !& then do this, else do a union of two queries
            sql = "SELECT " + select + " FROM " + from + " WHERE " + where + ";";
            System.out.println(sql);
            String teamName = "";
            try{
                //create a statement object
                Statement stmt = conn.createStatement();
                //send statement to DBMS
                ResultSet result = stmt.executeQuery(sql);
                //OUTPUT
                JOptionPane.showMessageDialog(null,"Results from Query");
                //System.out.println("______________________________________");
                while (result.next()) {
                    teamName += result.getString("name") + "\n";
                }
            } catch (Exception e){
                JOptionPane.showMessageDialog(null,"Error accessing Database.");
            }

            if(outputFile.isSelected())
            {
                fileOutputGlobal=true;
                try{
                    FileWriter fw = new FileWriter("output.txt");
                    fw.write(teamName);
                    fw.close();
                    fileOutputGlobal= false;
                }
                catch(Exception e)
                {
                    System.out.println("Error writing to output file");
                }
                    System.out.println("Success writing to output file");
                    JOptionPane.showMessageDialog(null, "Success writing to output file");
            }
            else{
                    JOptionPane.showMessageDialog(null, teamName);
            }
        }
    }

    /*
        The Performed Functions are triggered once their respective element in the GUI is used the by the user
    */

    private void textBoxActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        String parameter = textBox.getText();
        parameterGlobal = parameter;
    }                                       

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        search();
    }                                            

    private void drop1ActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        javax.swing.JComboBox combo = (javax.swing.JComboBox) evt.getSource();
        String drop1 = (String) combo.getSelectedItem();

        drop2.removeAllItems();

        if (drop1 == "Player") {
            drop1Global = "Player";
            drop2.addItem("Season");
            drop2.addItem("Team");
        }
        else if (drop1 == "Team") {
            drop1Global = "Team";
            drop2.addItem("Season"); 
            drop2.addItem("Player");
        }
    }                                     

    private void drop2ActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
        javax.swing.JComboBox combo = (javax.swing.JComboBox) evt.getSource();
        String drop2 = (String) combo.getSelectedItem();
        drop2Global = drop2;
    }                                     

    private void outputFileActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        fileOutputGlobal = outputFile.isSelected();
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        // Open connection with the database
        conn = null;
        try {
            Class.forName("org.postgresql.Driver");
            conn = DriverManager.getConnection("jdbc:postgresql://csce-315-db.engr.tamu.edu/team19_907", "sam_coburn32", "725009869");
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println(e.getClass().getName()+": "+e.getMessage());
            System.exit(0);
        }//end try catch
        JOptionPane.showMessageDialog(null,"Opened database successfully");


        // Create the GUI instance
        GUI gui = new GUI();
        gui.setTitle("Sports Statistics Database");
        gui.setVisible(true);

        // Once the GUI is closed, disconnect from the database
        gui.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent window_event) {
                try {
                    conn.close();
                    JOptionPane.showMessageDialog(null,"Closed database successfully");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,"Error closing database");
                }
                System.exit(0);
            }
        });

        /* Create and display the form */
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        */
    }

    private static Connection conn;

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> drop1;
    private javax.swing.JComboBox<String> drop2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox outputFile;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField textBox;
    // End of variables declaration                   
}